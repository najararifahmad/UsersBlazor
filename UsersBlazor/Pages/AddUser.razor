@page "/add-user"
@using Newtonsoft.Json;
@using UsersBlazor.DataLayer;
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject HttpClient Http


<div class="card" style="width: 30rem;">
    <div class="card-body">
        <h4 class="card-title">Add New User</h4>
        <EditForm Model="@user" OnValidSubmit="@SaveUser">
            <DataAnnotationsValidator />
            <div class="form-group" style="margin-bottom:10px">
                <label for="FirstName" class="form-label">
                    First Name
                </label>
                <div class="col-sm-10">
                    <InputText id="FirstName" class="form-control" placeholder="First Name"
                    @bind-Value="user.FirstName" />
                    <ValidationMessage For="@(() => user.FirstName)"/>
                </div>
            </div>
            <div class="form-group" style="margin-bottom:10px">
                <label for="LastName" class="form-label">
                    Last Name
                </label>
                <div class="col-sm-10">
                    <InputText id="LastName" class="form-control" placeholder="Last Name"
                    @bind-Value="user.LastName" />
                    <ValidationMessage For="@(() => user.LastName)" />
                </div>
            </div>
            <div class="form-group" style="margin-bottom:10px">
                <label for="Email Id" class="form-label">
                    Email Id
                </label>
                <div class="col-sm-10">
                    <InputText id="Email" class="form-control" placeholder="Email"
                    @bind-Value="user.Email" />
                    <ValidationMessage For="@(() => user.Email)"/>
                </div>
            </div>
            <br />
            <input type="submit" class="btn btn-block btn-primary" value="Save" />
        </EditForm>
    </div>
</div>


@code {
    User user = new User();

    private async void SaveUser()
    {
        await jsRuntime.InvokeVoidAsync("showLoader", null);

        var result = await Http.PostAsJsonAsync<User>("Users/Post", user);

        if(result.IsSuccessStatusCode)
        {
            var response = JsonConvert.DeserializeObject<ResponseDto>(await result.Content.ReadAsStringAsync());

            await jsRuntime.InvokeVoidAsync("showSwal", response!.Message, response.IsSuccess);

            if(response.IsSuccess)
            {
                navigationManager.NavigateTo("users-list");
            }
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("showSwal", "Error occured.", false);
        }

        await jsRuntime.InvokeVoidAsync("hideLoader", null);

    }
}
